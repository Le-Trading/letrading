{% extends 'base.html.twig' %}

{% block title %}
	{{thread.title}}
{% endblock %}

{% block body %}
	<div class="container">
		<h1 class="h4 text-center mb-5">Fil d'actualité du forum
			<b>{{thread.title}}</b><hr></h1>
		<div class="row">
			<div class="col-sm-7 mb-5 col-xs-12">
				<button class="btn btn-info col-12 mb-3" type="button" data-toggle="collapse" data-target="#postNewMessage" aria-expanded="false" aria-controls="postNewMessage">
					<h4 class="p-2"><i class="fas fa-arrow-right" style="vertical-align: middle"></i>  Postez votre message  <i class="fas fa-arrow-left" style="vertical-align: middle"></i></h4>
				</button>
				<div class="collapse row mb-5" id="postNewMessage">
					<div class="col-12 rounded p-3" style="background: rgba(255, 255, 255, 0.85);border: 1px solid #ddd;">
						{{form_start(form, { 'attr' : { 'id' : 'form-add-forum' }}
						)}}
						{{form_row(form.content)}}
                        {{form_row(form.media)}}
						<button class="btn btn-dark mb-2" type="button" data-toggle="collapse" data-target="#paramTrade" aria-expanded="false" aria-controls="paramTrade">
							Paramétrer un trade <i class="fa fa-cog"></i>
						</button>
						<div class="collapse" id="paramTrade">
							{{ form_row(form.feeling) }}
							<div class="triggerFeeling">
								{{form_row(form.startPrice)}}
								{{form_row(form.stopPrice)}}
								{{form_row(form.tp1)}}
								{{form_row(form.tp2)}}
								{{form_row(form.pair)}}
							</div>
						</div>
						{{form_errors(form)}}
						<br>
                        {{form_row(form.isAdmin)}}

						{#commande vocal#}
						<main>
							<div class="controls">
								<button type="button" id="mic">Get Microphone</button>
								<button type="button" id="record" hidden>Record</button>
							</div>
							<ul id="recordings"></ul>
						</main>

						<button class="btn btn-info" type="submit">Envoyer <i class="fa fa-paper-plane"></i></button>
						{{form_end(form)}}
					</div>
					<div id="form_response" class="hidden-form container">
						<hr>
						{{form_start(formReply)}}
						{{form_row(formReply.content)}}

						{{form_row(formReply.media)}}
						{{form_row(formReply.respond)}}
						<button class="btn btn-dark mb-2" type="submit">Répondre <i class="fas fa-paper-plane"></i></button>
						{{form_end(formReply)}}

					</div>

				</div>
				<div class="row">
					<div class="col-12">
						{% set posts = thread.posts %}
						{% for post in posts|sort|reverse %}
							{% if not post.isAdmin and post.respond == null %}
								{% include 'post/_affichagePost.html.twig' with {'post' : post} %}
							{% endif %}
						{% endfor %}
					</div>

				</div>
			</div>
			<div class="col-sm-5 mb-5 col-xs-12">
				<div class="card">
					<h2 class="h4 text-center mb-2 card-header bg-primary text-white">Messages administrateur</h2>
					{% set posts = thread.posts %}
					{% set hasAdminPost = false %}
					{% for post in posts %}
						{% if post.isAdmin %}
							{% set hasAdminPost = true %}
							{% include 'post/_affichagePost.html.twig' with {'post' : post, 'thread' : thread} %}
						{% else %}
							{% if loop.last and hasAdminPost == false %}
								<div class="card-body text-center">Aucun message administrateur pour ce forum</div>
							{% endif %}
						{% endif %}
					{% endfor %}
				</div>
			</div>
		</div>
	</div>
{% endblock %}
{% block javascripts %}
    <script src="https://unpkg.com/axios@0.19.2/dist/axios.min.js"></script>
	<script>
        var PLACEHOLDERS = [{
            id: 1,
            name: 'address',
            title: 'Address'
        },
            {
                id: 2,
                name: 'assignee',
                title: 'Assignee Name'
            },
            {
                id: 3,
                name: 'deadline',
                title: 'Deadline Time'
            },
            {
                id: 4,
                name: 'department',
                title: 'Department Name'
            },
            {
                id: 5,
                name: 'caseid',
                title: 'Case ID'
            }
        ];

        CKEDITOR.instances.post_content.destroy();
        CKEDITOR.replace('post_content', {
            plugins: 'autocomplete,textmatch,toolbar,wysiwygarea,basicstyles,link,undo,placeholder',
            "language": "fr",
            'uiColor' : '#7b8a8b',
            'height' : '10em',
            on: {
                instanceReady: function(evt) {
                    var itemTemplate = '<li data-id="{id}">' +
                        '<div><strong class="item-title">{title}</strong></div>' +
                        '</li>',
                        outputTemplate = '[[{title}]]<span>&nbsp;</span>';

                    var autocomplete = new CKEDITOR.plugins.autocomplete(evt.editor, {
                        textTestCallback: textTestCallback,
                        dataCallback: dataCallback,
                        itemTemplate: itemTemplate,
                        outputTemplate: outputTemplate
                    });

                    autocomplete.getHtmlToInsert = function(item) {
                        return this.outputTemplate.output(item);
                    }
                }
            }
        });

        function textTestCallback(range) {
            if (!range.collapsed) {
                return null;
            }
            return CKEDITOR.plugins.textMatch.match(range, matchCallback);
        }

        function matchCallback(text, offset) {
            var pattern = /\[{2}([A-z]|\])*$/,
                match = text.slice(0, offset)
                    .match(pattern);

            if (!match) {
                return null;
            }

            return {
                start: match.index,
                end: offset
            };
        }

        function dataCallback(matchInfo, callback) {
            var data = PLACEHOLDERS.filter(function(item) {
                var itemName = '[[' + item.name + ']]';
                return itemName.indexOf(matchInfo.query.toLowerCase()) == 0;
            });
            callback(data);
        }
	</script>
	<script>
        window.addEventListener('DOMContentLoaded', () => {
            const getMic = document.getElementById('mic');
            const recordButton = document.getElementById('record');
            const list = document.getElementById('recordings');
            if ('MediaRecorder' in window) {
                getMic.addEventListener('click', async () => {
                    getMic.setAttribute('hidden', 'hidden');
                    try {
                        const stream = await navigator.mediaDevices.getUserMedia({
                            audio: true,
                            video: false
                        });
                        const mimeType = 'audio/webm';
                        let chunks = [];
                        const recorder = new MediaRecorder(stream, { type: mimeType });
                        recorder.addEventListener('dataavailable', event => {
                            if (typeof event.data === 'undefined') return;
                            if (event.data.size === 0) return;
                            chunks.push(event.data);
                        });
                        recorder.addEventListener('stop', () => {
                            const recording = new Blob(chunks, {
                                type: mimeType
                            });
                            renderRecording(recording, list);
                            chunks = [];
                        });
                        recordButton.removeAttribute('hidden');
                        recordButton.addEventListener('click', () => {
                            if (recorder.state === 'inactive') {
                                recorder.start();
                                recordButton.innerText = 'Stop';
                            } else {
                                recorder.stop();
                                recordButton.innerText = 'Record';
                            }
                        });
                    } catch {
                        renderError(
                            'You denied access to the microphone so this demo will not work.'
                        );
                    }
                });
            } else {
                renderError("Sorry, your browser doesn't support the MediaRecorder API, so this demo will not work.");
            }
        });
        function renderError(message) {
            const main = document.querySelector('main');
            main.innerHTML = `<div class="error"><p>${message}</p></div>`;
        }
        function renderRecording(blob, list) {
            const blobUrl = URL.createObjectURL(blob);
            const li = document.createElement('li');
            const audio = document.createElement('audio');
            const anchor = document.createElement('a');
            anchor.setAttribute('href', blobUrl);
            const now = new Date();
            anchor.setAttribute(
                'download',
                `recording-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDay().toString().padStart(2, '0')}--${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}-${now.getSeconds().toString().padStart(2, '0')}.webm`
            );
            anchor.innerText = 'Download';
            audio.setAttribute('src', blobUrl);
            audio.setAttribute('controls', 'controls');
            li.appendChild(audio);
            li.appendChild(anchor);
            list.appendChild(li);
        }
	</script>
	<script>
		$(function() {
			$("select").change(function(){
				$(this).find("option:selected").each(function(){
					var optionValue = $(this).attr("value");
					if(optionValue){
						$(".triggerFeeling").show();
					} else{
						$(".triggerFeeling").hide();
					}
				});
			}).change();
		});
	</script>
	<script>
		function handleAnswering(id) {
			CKEDITOR.instances.response_content.destroy();

            var pseudo = $(id).data('target').substring(1);
			var id = $(id).data('response');
			$('#post' + id).after().append($('#form_response'));
			$('#form_response').removeClass('hidden-form');
			$('#response_respond').val(id);
			CKEDITOR.replace('response_content', {
				"toolbar": [
				[
				"Bold", "Italic"
				],
				[
				"NumberedList",
				"BulletedList",
				"-",
				"Outdent",
				"Indent"
				],
				[
				"Link", "Unlink"
				],
				["About"]
				],
				"language": "fr",
                'uiColor' : '#7b8a8b',
                'height' : '10em'
			});
            CKEDITOR.instances.response_content.setData("@"+pseudo);
        }
	</script>
	<script type="text/javascript">
		function onClickBtnVote(event) {
			event.preventDefault();
			const url = this.href;
			const id = this.dataset.id;
			const icone = this.querySelector('#thumbsLike'+id +' i');
			axios.get(url).then(function (response) {
			const likes = response.data.votes;
			$('#nbVotes' + id).text(likes);
			if($('#thumbsLike' + id + ' i').hasClass('far')){
				$('#thumbsLike' + id + ' i').removeClass('far').addClass('fas');
			}
			else{
				$('#thumbsLike' + id + ' i').removeClass('fas').addClass('far');
				}
			if($('#thumbsLike'+id).hasClass('liked-thumbs')){
				$('#thumbsLike'+id).removeClass('liked-thumbs').addClass('not-liked-thumbs');
			}
			else{
				$('#thumbsLike'+id).removeClass('not-liked-thumbs').addClass('liked-thumbs');
				}

			if($('#boutonLike'+id).hasClass('liked')){
				$('#boutonLike'+id).removeClass('liked').addClass('not-liked');
			}
			else{
				$('#boutonLike'+id).removeClass('not-liked').addClass('liked');
			}
			});
			}
			document.querySelectorAll('a.js-css-likes').forEach(function (link) {
			link.addEventListener('click', onClickBtnVote);
			});
	</script>
{% endblock %}
